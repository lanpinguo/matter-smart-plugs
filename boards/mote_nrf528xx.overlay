// To get started, press Ctrl+Space to bring up the completion menu and view the available nodes.

// You can also use the buttons in the sidebar to perform actions on nodes.
// Actions currently available include:

// * Enabling / disabling the node
// * Adding the bus to a bus
// * Removing the node
// * Connecting ADC channels

// For more help, browse the DeviceTree documentation at https://docs.zephyrproject.org/latest/guides/dts/index.html
// You can also visit the nRF DeviceTree extension documentation at https://nrfconnect.github.io/vscode-nrf-connect/devicetree/nrfdevicetree.html



/ {
	chosen {
		nordic,pm-ext-flash = &w25q128;
	};

	/*
	* In some default configurations within the nRF Connect SDK,
	* e.g. on nRF52840, the chosen zephyr,entropy node is &cryptocell.
	* This devicetree overlay ensures that default is overridden wherever it
	* is set, as this application uses the RNG node for entropy exclusively.
	*/

	chosen {
		zephyr,entropy = &rng;
	};

	/*
	* By default, PWM module is only configured for led0 (LED1 on the board).
	* The light bulb app, however, uses LED2 to show the state of the lighting,
	* including its brightness level.
	*/
	aliases {
		pwm-led1 = &pwm_led1;
	};

	pwmleds {
		pwm_led1: pwm_led_1 {
			pwms = <&pwm0 1 PWM_MSEC(20) PWM_POLARITY_INVERTED>;
		};
	};

};

&pwm0 {
	pinctrl-0 = <&pwm0_default_alt>;
	pinctrl-1 = <&pwm0_sleep_alt>;
	pinctrl-names = "default", "sleep";
};

&pinctrl {
	pwm0_default_alt: pwm0_default_alt {
		group1 {
			psels = <NRF_PSEL(PWM_OUT1, 0, 20)>;
			nordic,invert;
		};
	};

	pwm0_sleep_alt: pwm0_sleep_alt {
		group1 {
			psels = <NRF_PSEL(PWM_OUT1, 0, 20)>;
			low-power-enable;
		};
	};

};

/* Disable unused peripherals to reduce power consumption */
&adc {
	status = "disabled";
};
&uart1 {
	status = "disabled";
};

&spi1 {
	status = "disabled";
};
&spi3 {
	status = "disabled";
};
&usbd {
	status = "disabled";
};


&i2c0 {
    io_expander_0: io_expander@20{
        compatible = "i2c-device";
        reg = < 0x20 >;
        label = "io_expander0";
    };

    io_expander_1: io_expander@21{
        compatible = "i2c-device";
        reg = < 0x21 >;
        label = "io_expander1";
    };

    io_expander_2: io_expander@22{
        compatible = "i2c-device";
        reg = < 0x22 >;
        label = "io_expander2";
    };

    io_expander_3: io_expander@23{
        compatible = "i2c-device";
        reg = < 0x23 >;
        label = "io_expander3";
    };

    io_expander_4: io_expander@24{
        compatible = "i2c-device";
        reg = < 0x24 >;
        label = "io_expander4";
    };

    io_expander_5: io_expander@25{
        compatible = "i2c-device";
        reg = < 0x25 >;
        label = "io_expander5";
    };

    io_expander_6: io_expander@26{
        compatible = "i2c-device";
        reg = < 0x26 >;
        label = "io_expander6";
    };

    io_expander_7: io_expander@27{
        compatible = "i2c-device";
        reg = < 0x27 >;
        label = "io_expander7";
    };

};

